import { ApplicationContext } from '@frontapp/ui-bridge';
declare type InternalContextProperties = 'hostId' | 'entryPointId';
export declare type WebViewContext = Omit<ApplicationContext, InternalContextProperties>;
export declare enum WebViewMessageTypesEnum {
    CONTEXT_UPDATE = "context_update",
    FUNCTION_CALL = "function_call",
    FUNCTION_CANCEL = "function_cancel",
    FUNCTION_RESULT = "function_result",
    FUNCTION_ERROR = "function_error"
}
interface WebViewContextUpdateMessage {
    type: WebViewMessageTypesEnum.CONTEXT_UPDATE;
    context: WebViewContext;
}
interface WebViewFunctionResultMessage {
    type: WebViewMessageTypesEnum.FUNCTION_RESULT;
    id: string;
    value: unknown;
}
interface WebViewFunctionErrorMessage {
    type: WebViewMessageTypesEnum.FUNCTION_ERROR;
    id: string;
    error: string;
}
export declare type WebViewHostMessage = WebViewContextUpdateMessage | WebViewFunctionResultMessage | WebViewFunctionErrorMessage;
export declare type WebViewHostMessageWithPort = WebViewHostMessage & {
    port: MessagePort;
};
declare type WebViewContextUpdateMessageWithPort = WebViewContextUpdateMessage & {
    port: MessagePort;
};
export declare const webViewBridgeHandshake = "@frontapp/ui-sdk#WebViewBridge.handshake";
interface WebViewFunctionCallMessage {
    type: WebViewMessageTypesEnum.FUNCTION_CALL;
    id: string;
    contextId: string;
    name: string;
    args: ReadonlyArray<unknown>;
}
interface WebViewFunctionCancelMessage {
    type: WebViewMessageTypesEnum.FUNCTION_CANCEL;
    id: string;
}
export declare type WebViewSdkMessage = WebViewFunctionCallMessage | WebViewFunctionCancelMessage;
export declare function isContextUpdateMessageWithPort(message: WebViewHostMessage): message is WebViewContextUpdateMessageWithPort;
export declare function isFunctionResultMessage(message: WebViewHostMessage): message is WebViewFunctionResultMessage | WebViewFunctionErrorMessage;
export {};
