import { ApplicationCancelError, buildApplicationCancelTokenSource } from '@frontapp/ui-bridge';
export * from '@frontapp/ui-bridge';
import cuid from 'cuid';
import { Observable, fromEvent } from 'rxjs';
import { take, publish, filter, publishReplay, map } from 'rxjs/operators';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var WebViewMessageTypesEnum;
(function (WebViewMessageTypesEnum) {
    WebViewMessageTypesEnum["CONTEXT_UPDATE"] = "context_update";
    WebViewMessageTypesEnum["FUNCTION_CALL"] = "function_call";
    WebViewMessageTypesEnum["FUNCTION_CANCEL"] = "function_cancel";
    WebViewMessageTypesEnum["FUNCTION_RESULT"] = "function_result";
    WebViewMessageTypesEnum["FUNCTION_ERROR"] = "function_error";
})(WebViewMessageTypesEnum || (WebViewMessageTypesEnum = {}));
/*
 * WebView to AppSDK.
 */
var webViewBridgeHandshake = '@frontapp/ui-sdk#WebViewBridge.handshake';
/*
 * Type guards.
 */
function isContextUpdateMessageWithPort(message) {
    return message.type === WebViewMessageTypesEnum.CONTEXT_UPDATE;
}
function isFunctionResultMessage(message) {
    return (message.type === WebViewMessageTypesEnum.FUNCTION_RESULT ||
        message.type === WebViewMessageTypesEnum.FUNCTION_ERROR);
}

/*
 * SDK.
 */
function buildWebViewSdk() {
    /*
     * Core observable.
     */
    var _this = this;
    // Create an observable for any hostmessage without ever unsubscribing.
    var messages = new Observable(function (next) { return connectToParent().subscribe(next); }).pipe(publish(), connectOnSubscribe());
    var contextUpdates = messages.pipe(filter(isContextUpdateMessageWithPort), publishReplay(1), connectOnSubscribe());
    /*
     * Context function forwarders.
     */
    var proxyFunctionCall = function (port, callId, contextId, name, args) {
        port.postMessage({
            type: WebViewMessageTypesEnum.FUNCTION_CALL,
            id: callId,
            contextId: contextId,
            name: name,
            args: args
        });
        return messages.pipe(filter(isFunctionResultMessage), filter(function (m) { return m.id === callId; }), map(function (m) {
            switch (m.type) {
                case WebViewMessageTypesEnum.FUNCTION_RESULT:
                    return m.value;
                case WebViewMessageTypesEnum.FUNCTION_ERROR:
                default:
                    throw new Error(String(m.error));
            }
        }), take(1));
    };
    var proxyFunctionCancel = function (port, callId) {
        port.postMessage({ type: WebViewMessageTypesEnum.FUNCTION_CANCEL, id: callId });
    };
    /*
     * Context proxy.
     */
    var contextProxyUpdates = contextUpdates.pipe(map(function (_a) {
        var port = _a.port, context = _a.context;
        return new Proxy(context, {
            get: function (target, property) {
                var propertyName = String(property);
                var functionArity = target.functionArities[propertyName];
                // If the property exists or it is not a function with arity, let the target handle it.
                if (property in target || !Number.isInteger(functionArity))
                    return target[property];
                // Otherwise, create the function.
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var callId = cuid();
                    // Extract the cancel token.
                    var cancelTokenIndex = functionArity - 1;
                    var cancelToken = args[cancelTokenIndex];
                    // Do not send the cancel token in the proxied arguments.
                    var argsToSend = args.slice(0, cancelTokenIndex);
                    return new Promise(function (resolve, reject) {
                        var subscription = proxyFunctionCall(port, callId, context.id, propertyName, argsToSend).subscribe({
                            next: resolve,
                            error: reject
                        });
                        if (cancelToken)
                            cancelToken.promise.then(function () {
                                if (subscription.closed)
                                    return;
                                subscription.unsubscribe();
                                reject(new ApplicationCancelError());
                                proxyFunctionCancel(port, callId);
                            });
                    });
                };
            }
        });
    }));
    var baseBridge = {
        contextUpdates: contextProxyUpdates,
        buildCancelTokenSource: buildApplicationCancelTokenSource,
        isCancelError: function (error) { return error instanceof ApplicationCancelError; }
    };
    /*
     * SDK proxy.
     */
    return new Proxy(baseBridge, {
        get: function (target, property) {
            // If the property exists on the target, return it.
            if (property in target)
                return target[property];
            // Otherwise, assume that it's an async function call.
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new Promise(function (resolve, reject) {
                    contextProxyUpdates.pipe(take(1)).subscribe({
                        next: function (context) { return __awaiter(_this, void 0, void 0, function () {
                            var contextValue, error, _a, error_1;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        contextValue = context[property];
                                        if (contextValue === undefined) {
                                            error = String(property) + " is not a valid function for context " + context.type + ".";
                                            reject(new ReferenceError(error));
                                            return [2 /*return*/];
                                        }
                                        _b.label = 1;
                                    case 1:
                                        _b.trys.push([1, 3, , 4]);
                                        _a = resolve;
                                        return [4 /*yield*/, contextValue.apply(void 0, args)];
                                    case 2:
                                        _a.apply(void 0, [_b.sent()]);
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_1 = _b.sent();
                                        reject(error_1);
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); },
                        error: reject
                    });
                });
            };
        }
    });
}
var Front = buildWebViewSdk();
var contextUpdates = Front.contextUpdates, buildCancelTokenSource = Front.buildCancelTokenSource, isCancelError = Front.isCancelError;
/*
 * Helpers.
 */
function connectToParent() {
    // eslint-disable-next-line no-undef
    var parent = window.parent;
    var _a = new MessageChannel(), port1 = _a.port1, port2 = _a.port2;
    var messages = fromEvent(port1, 'message').pipe(map(function (e) {
        return (__assign(__assign({}, e.data), { port: port1 }));
    }));
    // Start the port and send the handshake.
    port1.start();
    parent.postMessage(webViewBridgeHandshake, '*', [port2]);
    return messages;
}
function connectOnSubscribe() {
    return function (source) {
        if (!isConnectableObservable(source))
            return source;
        return new Observable(function (next) {
            var subscription = source.subscribe(next);
            source.connect();
            return subscription;
        });
    };
}
function isConnectableObservable(source) {
    return typeof source.connect === 'function';
}

export default Front;
export { buildCancelTokenSource, contextUpdates, isCancelError };
