!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t=t||self).Front=e()}(this,(function(){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};function e(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var n=function(){return(n=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function r(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(s,u)}c((r=r.apply(t,e||[])).next())}))}function i(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}var o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function s(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function u(t,e){return t(e={exports:{}},e.exports),e.exports}var c=u((function(t,e){var n=o&&o.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(e){var n=this.constructor,r=t.call(this,e)||this,i=n.prototype;return Object.setPrototypeOf(r,i),r}return n(e,t),e}(Error);e.ApplicationError=r;var i=function(t){function e(e){var n=t.call(this,"Something went wrong.")||this;return n.originalError=e,n}return n(e,t),e}(r);e.ApplicationDefaultError=i}));s(c);c.ApplicationError,c.ApplicationDefaultError;var a=u((function(t,e){var n=o&&o.__extends||function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var r=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e}(c.ApplicationError);e.ApplicationCancelError=r,e.buildApplicationCancelTokenSource=function(){var t=null,e=!1;return{cancel:function(n){if(!t)throw new Error("Promise initialization failed");e=!0,t({message:n||"The process was cancelled."})},token:{promise:new Promise((function(e){t=e})),throwIfRequested:function(){if(e)throw new r}}}}}));s(a);a.ApplicationCancelError,a.buildApplicationCancelTokenSource;var l=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.CONVERSATION_LINK_DROPDOWN="CONVERSATION_LINK_DROPDOWN",t.MESSAGE_MORE_DROPDOWN="MESSAGE_MORE_DROPDOWN",t.SIDE_PANEL="SIDE_PANEL"}(e.EntryPointTypesEnum||(e.EntryPointTypesEnum={}))}));s(l);l.EntryPointTypesEnum;var f=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.NO_CONVERSATION="NO_CONVERSATION",t.SINGLE_CONVERSATION="SINGLE_CONVERSATION",t.MULTI_CONVERSATIONS="MULTI_CONVERSATIONS",t.MESSAGE="MESSAGE"}(e.ApplicationContextTypesEnum||(e.ApplicationContextTypesEnum={}))}));s(f);f.ApplicationContextTypesEnum;var h=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.GET="GET",t.POST="POST",t.PUT="PUT",t.PATCH="PATCH",t.DELETE="DELETE"}(e.HttpVerbsEnum||(e.HttpVerbsEnum={}))}));s(h);h.HttpVerbsEnum;var p=u((function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.BLOCK="BLOCK",t.LAYER="LAYER"}(e.WidgetTypesEnum||(e.WidgetTypesEnum={}))}));s(p);p.WidgetTypesEnum;var d=u((function(t,e){function n(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0}),e.getBridge=function(){return window.buildBridge("2.0.0")},n(a),n(f),n(l),n(c),n(h),n(p)}));s(d);var b,y=d.ApplicationCancelError,v=d.buildApplicationCancelTokenSource,_=(d.ApplicationCancelToken,d.getBridge,function(t,e){var n="000000000"+t;return n.substr(n.length-e)}),w="object"==typeof window?window:self,E=Object.keys(w).length,g=navigator.mimeTypes?navigator.mimeTypes.length:0,m=_((g+navigator.userAgent.length).toString(36)+E.toString(36),4),S=function(){return m},O="undefined"!=typeof window&&(window.crypto||window.msCrypto)||"undefined"!=typeof self&&self.crypto;if(O){var T=Math.pow(2,32)-1;b=function(){return Math.abs(O.getRandomValues(new Uint32Array(1))[0]/T)}}else b=Math.random;var x=b,N=0,A=Math.pow(36,4);function C(){return _((x()*A<<0).toString(36),4)}function P(){return N=N<A?N:0,++N-1}function I(){return"c"+(new Date).getTime().toString(36)+_(P().toString(36),4)+S()+(C()+C())}I.slug=function(){var t=(new Date).getTime().toString(36),e=P().toString(36).slice(-4),n=S().slice(0,1)+S().slice(-1),r=C().slice(-2);return t.slice(-2)+e+n+r},I.isCuid=function(t){return"string"==typeof t&&!!t.startsWith("c")},I.isSlug=function(t){if("string"!=typeof t)return!1;var e=t.length;return e>=7&&e<=10},I.fingerprint=S;var j=I;function M(t){return"function"==typeof t}var R=!1,D={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;R=t},get useDeprecatedSynchronousErrorHandling(){return R}};function L(t){setTimeout((function(){throw t}),0)}var k={closed:!0,next:function(t){},error:function(t){if(D.useDeprecatedSynchronousErrorHandling)throw t;L(t)},complete:function(){}},U=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();var V=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),F=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n,r=this._parentOrParents,i=this._unsubscribe,o=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,r instanceof t)r.remove(this);else if(null!==r)for(var s=0;s<r.length;++s){r[s].remove(this)}if(M(i))try{i.call(this)}catch(t){e=t instanceof V?H(t.errors):[t]}if(U(o)){s=-1;for(var u=o.length;++s<u;){var c=o[s];if(null!==(n=c)&&"object"==typeof n)try{c.unsubscribe()}catch(t){e=e||[],t instanceof V?e=e.concat(H(t.errors)):e.push(t)}}}if(e)throw new V(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function H(t){return t.reduce((function(t,e){return t.concat(e instanceof V?e.errors:e)}),[])}var W=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),G=function(t){function n(e,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=k;break;case 1:if(!e){o.destination=k;break}if("object"==typeof e){e instanceof n?(o.syncErrorThrowable=e.syncErrorThrowable,o.destination=e,e.add(o)):(o.syncErrorThrowable=!0,o.destination=new Y(o,e));break}default:o.syncErrorThrowable=!0,o.destination=new Y(o,e,r,i)}return o}return e(n,t),n.prototype[W]=function(){return this},n.create=function(t,e,r){var i=new n(t,e,r);return i.syncErrorThrowable=!1,i},n.prototype.next=function(t){this.isStopped||this._next(t)},n.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},n.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},n.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},n}(F),Y=function(t){function n(e,n,r,i){var o,s=t.call(this)||this;s._parentSubscriber=e;var u=s;return M(n)?o=n:n&&(o=n.next,r=n.error,i=n.complete,n!==k&&(M((u=Object.create(n)).unsubscribe)&&s.add(u.unsubscribe.bind(u)),u.unsubscribe=s.unsubscribe.bind(s))),s._context=u,s._next=o,s._error=r,s._complete=i,s}return e(n,t),n.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;D.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},n.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=D.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):L(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;L(t)}}},n.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};D.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},n.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),D.useDeprecatedSynchronousErrorHandling)throw t;L(t)}},n.prototype.__tryOrSetError=function(t,e,n){if(!D.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return D.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(L(e),!0)}return!1},n.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},n}(G);var B=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function q(){}function z(t){return t?1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}:q}var K=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof G)return t;if(t[W])return t[W]()}return t||e||n?new G(t,e,n):new G(k)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||D.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),D.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){D.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),!function(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof G?r:null}return!0}(t)?console.warn(e):t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=X(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[B]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:z(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=X(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function X(t){if(t||(t=Promise),!t)throw new Error("no Promise impl found");return t}var J=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),Q=function(t){function n(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return e(n,t),n.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},n}(F),Z=function(t){function n(e){var n=t.call(this,e)||this;return n.destination=e,n}return e(n,t),n}(G),$=function(t){function n(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(n,t),n.prototype[W]=function(){return new Z(this)},n.prototype.lift=function(t){var e=new tt(this,this);return e.operator=t,e},n.prototype.next=function(t){if(this.closed)throw new J;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},n.prototype.error=function(t){if(this.closed)throw new J;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},n.prototype.complete=function(){if(this.closed)throw new J;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},n.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},n.prototype._trySubscribe=function(e){if(this.closed)throw new J;return t.prototype._trySubscribe.call(this,e)},n.prototype._subscribe=function(t){if(this.closed)throw new J;return this.hasError?(t.error(this.thrownError),F.EMPTY):this.isStopped?(t.complete(),F.EMPTY):(this.observers.push(t),new Q(this,t))},n.prototype.asObservable=function(){var t=new K;return t.source=this,t},n.create=function(t,e){return new tt(t,e)},n}(K),tt=function(t){function n(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return e(n,t),n.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},n.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},n.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},n.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):F.EMPTY},n}($);var et=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new nt(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),nt=function(t){function n(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return e(n,t),n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},n}(G),rt=function(t){function n(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return e(n,t),n.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},n.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},n.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new F).add(this.source.subscribe(new ot(this.getSubject(),this))),t.closed&&(this._connection=null,t=F.EMPTY)),t},n.prototype.refCount=function(){return(t=this).lift(new et(t));var t},n}(K),it=function(){var t=rt.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),ot=function(t){function n(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return e(n,t),n.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},n.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},n.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},n}(Z),st=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return e(n,t),n.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},n.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},n.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},n}(function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},n.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},n}(function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return this},n}(F))),ut=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),ct=new(function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n}(function(t){function n(e,r){void 0===r&&(r=ut.now);var i=t.call(this,e,(function(){return n.delegate&&n.delegate!==i?n.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return e(n,t),n.prototype.schedule=function(e,r,i){return void 0===r&&(r=0),n.delegate&&n.delegate!==this?n.delegate.schedule(e,r,i):t.prototype.schedule.call(this,e,r,i)},n.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(ut)))(st),at=new K((function(t){return t.complete()}));function lt(t){return t?function(t){return new K((function(e){return t.schedule((function(){return e.complete()}))}))}(t):at}function ft(t){return t&&"function"==typeof t.schedule}function ht(t,e){return new K((function(n){var r=new F,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function pt(t,e){return e?ht(t,e):new K((n=t,function(t){for(var e=0,r=n.length;e<r&&!t.closed;e++)t.next(n[e]);t.complete()}));var n}function dt(t){var e=t.error;t.subscriber.error(e)}var bt=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){var t,e;switch(this.kind){case"N":return function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return ft(n)?(t.pop(),ht(t,n)):pt(t)}(this.value);case"E":return t=this.error,new K(e?function(n){return e.schedule(dt,0,{error:t,subscriber:n})}:function(e){return e.error(t)});case"C":return lt()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}(),yt=function(t){function n(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return e(n,t),n.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},n.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(n.dispatch,this.delay,new vt(t,this.destination)))},n.prototype._next=function(t){this.scheduleMessage(bt.createNext(t))},n.prototype._error=function(t){this.scheduleMessage(bt.createError(t)),this.unsubscribe()},n.prototype._complete=function(){this.scheduleMessage(bt.createComplete()),this.unsubscribe()},n}(G),vt=function(){return function(t,e){this.notification=t,this.destination=e}}(),_t=function(t){function n(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return e(n,t),n.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},n.prototype.nextTimeWindow=function(e){this._events.push(new wt(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},n.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new J;if(this.isStopped||this.hasError?e=F.EMPTY:(this.observers.push(t),e=new Q(this,t)),i&&t.add(t=new yt(t,i)),n)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},n.prototype._getNow=function(){return(this.scheduler||ct).now()},n.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},n}($),wt=function(){return function(t,e){this.time=t,this.value=e}}(),Et=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}();function gt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new mt(t,e))}}var mt=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new St(t,this.project,this.thisArg))},t}(),St=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return e(n,t),n.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},n}(G);function Ot(t,e,n,r){return M(n)&&(r=n,n=void 0),r?Ot(t,e,n).pipe(gt((function(t){return U(t)?r.apply(void 0,t):r(t)}))):new K((function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var u=e;e.addEventListener(n,r,o),s=function(){return u.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),s=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),s=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,f=e.length;l<f;l++)t(e[l],n,r,i,o)}i.add(s)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function Tt(t,e){return function(n){return n.lift(new xt(t,e))}}var xt=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Nt(t,this.predicate,this.thisArg))},t}(),Nt=function(t){function n(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return e(n,t),n.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},n}(G);function At(t){return function(e){return 0===t?lt():e.lift(new Ct(t))}}var Ct=function(){function t(t){if(this.total=t,this.total<0)throw new Et}return t.prototype.call=function(t,e){return e.subscribe(new Pt(t,this.total))},t}(),Pt=function(t){function n(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return e(n,t),n.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},n}(G);function It(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new Mt(r,e));var i=Object.create(n,it);return i.source=n,i.subjectFactory=r,i}}var jt,Mt=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),i=n(r).subscribe(t);return i.add(e.subscribe(r)),i},t}();!function(t){t.CONTEXT_UPDATE="context_update",t.FUNCTION_CALL="function_call",t.FUNCTION_CANCEL="function_cancel",t.FUNCTION_RESULT="function_result",t.FUNCTION_ERROR="function_error"}(jt||(jt={}));function Rt(t){return t.type===jt.CONTEXT_UPDATE}function Dt(t){return t.type===jt.FUNCTION_RESULT||t.type===jt.FUNCTION_ERROR}function Lt(){return function(t){return function(t){return"function"==typeof t.connect}(t)?new K((function(e){var n=t.subscribe(e);return t.connect(),n})):t}}return function(){var t,e=this,o=new K((function(t){return function(){var t=window.parent,e=new MessageChannel,r=e.port1,i=e.port2,o=Ot(r,"message").pipe(gt((function(t){return n(n({},t.data),{port:r})})));return r.start(),t.postMessage("@frontapp/ui-sdk#WebViewBridge.handshake","*",[i]),o}().subscribe(t)})).pipe(t?It((function(){return new $}),t):It(new $),Lt()),s=o.pipe(Tt(Rt),function(t,e,n,r){n&&"function"!=typeof n&&(r=n);var i="function"==typeof n?n:void 0,o=new _t(t,e,r);return function(t){return It((function(){return o}),i)(t)}}(1),Lt()),u=function(t,e,n,r,i){return t.postMessage({type:jt.FUNCTION_CALL,id:e,contextId:n,name:r,args:i}),o.pipe(Tt(Dt),Tt((function(t){return t.id===e})),gt((function(t){switch(t.type){case jt.FUNCTION_RESULT:return t.value;case jt.FUNCTION_ERROR:default:throw new Error(String(t.error))}})),At(1))},c=function(t,e){t.postMessage({type:jt.FUNCTION_CANCEL,id:e})},a=s.pipe(gt((function(t){var e=t.port,n=t.context;return new Proxy(n,{get:function(t,r){var i=String(r),o=t.functionArities[i];return r in t||!Number.isInteger(o)?t[r]:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var s=j(),a=o-1,l=t[a],f=t.slice(0,a);return new Promise((function(t,r){var o=u(e,s,n.id,i,f).subscribe({next:t,error:r});l&&l.promise.then((function(){o.closed||(o.unsubscribe(),r(new y),c(e,s))}))}))}}})})));return new Proxy({contextUpdates:a,buildCancelTokenSource:v,isCancelError:function(t){return t instanceof y}},{get:function(t,n){return n in t?t[n]:function(){for(var t=[],o=0;o<arguments.length;o++)t[o]=arguments[o];return new Promise((function(o,s){a.pipe(At(1)).subscribe({next:function(u){return r(e,void 0,void 0,(function(){var e,r,c,a;return i(this,(function(i){switch(i.label){case 0:if(void 0===(e=u[n]))return r=String(n)+" is not a valid function for context "+u.type+".",s(new ReferenceError(r)),[2];i.label=1;case 1:return i.trys.push([1,3,,4]),c=o,[4,e.apply(void 0,t)];case 2:return c.apply(void 0,[i.sent()]),[3,4];case 3:return a=i.sent(),s(a),[3,4];case 4:return[2]}}))}))},error:s})}))}}})}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
