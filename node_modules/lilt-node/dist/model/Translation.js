"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The Translation model module.
 * @module model/Translation
 * @version 0.5.0
 */
var Translation = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Translation</code>.
   * A machine translation (MT) or a translation memory (TM) match of a source segment.
   * @alias module:model/Translation
   */
  function Translation() {
    _classCallCheck(this, Translation);

    Translation.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(Translation, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>Translation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Translation} obj Optional instance to populate.
     * @return {module:model/Translation} The populated <code>Translation</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Translation();

        if (data.hasOwnProperty('target')) {
          obj['target'] = _ApiClient["default"].convertToType(data['target'], 'String');
        }

        if (data.hasOwnProperty('targetWithTags')) {
          obj['targetWithTags'] = _ApiClient["default"].convertToType(data['targetWithTags'], 'String');
        }

        if (data.hasOwnProperty('align')) {
          obj['align'] = _ApiClient["default"].convertToType(data['align'], 'String');
        }

        if (data.hasOwnProperty('provenance')) {
          obj['provenance'] = _ApiClient["default"].convertToType(data['provenance'], 'String');
        }

        if (data.hasOwnProperty('score')) {
          obj['score'] = _ApiClient["default"].convertToType(data['score'], 'Number');
        }

        if (data.hasOwnProperty('isTMMatch')) {
          obj['isTMMatch'] = _ApiClient["default"].convertToType(data['isTMMatch'], 'Boolean');
        }

        if (data.hasOwnProperty('targetDelimiters')) {
          obj['targetDelimiters'] = _ApiClient["default"].convertToType(data['targetDelimiters'], ['String']);
        }

        if (data.hasOwnProperty('targetWords')) {
          obj['targetWords'] = _ApiClient["default"].convertToType(data['targetWords'], ['String']);
        }
      }

      return obj;
    }
  }]);

  return Translation;
}();
/**
 * The target string.
 * @member {String} target
 */


Translation.prototype['target'] = undefined;
/**
 * The target string with source tags projected into the target.
 * @member {String} targetWithTags
 */

Translation.prototype['targetWithTags'] = undefined;
/**
 * \"MT only: A whitespace delimited list of source-target alignment indices.\" 
 * @member {String} align
 */

Translation.prototype['align'] = undefined;
/**
 * Positive values indicate that the word is from the Memory, with contiguous identical entries (e.g., 2 2) indicating phrase matches. Negative contiguous values indicate entries from the Lexicon. 0 indicates a word from the background data. 
 * @member {String} provenance
 */

Translation.prototype['provenance'] = undefined;
/**
 * The score of the translation.
 * @member {Number} score
 */

Translation.prototype['score'] = undefined;
/**
 * TM only: If true, indicates an exact translation memory match.
 * @member {Boolean} isTMMatch
 */

Translation.prototype['isTMMatch'] = undefined;
/**
 * A format string that indicates, for each word, if the word should be preceded by a space.
 * @member {Array.<String>} targetDelimiters
 */

Translation.prototype['targetDelimiters'] = undefined;
/**
 * The target string can be constructed by suffixing each `targetDelimiters` entry with its corresponding word in `targetWords` and concatenating the constructed array. Please note that the `targetDelimiters` array has one more entry than `targetWords` array which is why the last entry in the array will be the last value of `targetDelimiters`. 
 * @member {Array.<String>} targetWords
 */

Translation.prototype['targetWords'] = undefined;
var _default = Translation;
exports["default"] = _default;