"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * The Memory model module.
 * @module model/Memory
 * @version 0.5.0
 */
var Memory = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Memory</code>.
   * A Memory is a collection of parallel (source/target) segments from which a MT/TM model is trained. When a translator confirms a segment in the Interface, a parallel segment is added to the Memory. Parallel segments from existing translation memories and bitexts can also be added to the Memory via the REST API. 
   * @alias module:model/Memory
   */
  function Memory() {
    _classCallCheck(this, Memory);

    Memory.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  _createClass(Memory, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>Memory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Memory} obj Optional instance to populate.
     * @return {module:model/Memory} The populated <code>Memory</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Memory();

        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'Number');
        }

        if (data.hasOwnProperty('srclang')) {
          obj['srclang'] = _ApiClient["default"].convertToType(data['srclang'], 'String');
        }

        if (data.hasOwnProperty('trglang')) {
          obj['trglang'] = _ApiClient["default"].convertToType(data['trglang'], 'String');
        }

        if (data.hasOwnProperty('srclocale')) {
          obj['srclocale'] = _ApiClient["default"].convertToType(data['srclocale'], 'String');
        }

        if (data.hasOwnProperty('trglocale')) {
          obj['trglocale'] = _ApiClient["default"].convertToType(data['trglocale'], 'String');
        }

        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }

        if (data.hasOwnProperty('version')) {
          obj['version'] = _ApiClient["default"].convertToType(data['version'], 'Number');
        }

        if (data.hasOwnProperty('created_at')) {
          obj['created_at'] = _ApiClient["default"].convertToType(data['created_at'], 'Number');
        }

        if (data.hasOwnProperty('updated_at')) {
          obj['updated_at'] = _ApiClient["default"].convertToType(data['updated_at'], 'Number');
        }

        if (data.hasOwnProperty('num_segments')) {
          obj['num_segments'] = _ApiClient["default"].convertToType(data['num_segments'], 'Number');
        }

        if (data.hasOwnProperty('resources')) {
          obj['resources'] = _ApiClient["default"].convertToType(data['resources'], ['String']);
        }
      }

      return obj;
    }
  }]);

  return Memory;
}();
/**
 * A unique number identifying the Memory.
 * @member {Number} id
 */


Memory.prototype['id'] = undefined;
/**
 * An ISO 639-1 language identifier.
 * @member {String} srclang
 */

Memory.prototype['srclang'] = undefined;
/**
 * An ISO 639-1 language identifier.
 * @member {String} trglang
 */

Memory.prototype['trglang'] = undefined;
/**
 * An ISO 639-1 language identifier.
 * @member {String} srclocale
 */

Memory.prototype['srclocale'] = undefined;
/**
 * An ISO 639-1 language identifier.
 * @member {String} trglocale
 */

Memory.prototype['trglocale'] = undefined;
/**
 * A name for the Memory.
 * @member {String} name
 */

Memory.prototype['name'] = undefined;
/**
 * The current version of the Memory, which is the number of updates since the memory was created.
 * @member {Number} version
 */

Memory.prototype['version'] = undefined;
/**
 * Time at which the object was created. Measured in seconds since the Unix epoch.
 * @member {Number} created_at
 */

Memory.prototype['created_at'] = undefined;
/**
 * Time at which the object was created. Measured in seconds since the Unix epoch.
 * @member {Number} updated_at
 */

Memory.prototype['updated_at'] = undefined;
/**
 * The number of confirmed Segments incorporated into this Memory.
 * @member {Number} num_segments
 */

Memory.prototype['num_segments'] = undefined;
/**
 * The resource files (translation memories and termbases) associated with this Memory.
 * @member {Array.<String>} resources
 */

Memory.prototype['resources'] = undefined;
var _default = Memory;
exports["default"] = _default;