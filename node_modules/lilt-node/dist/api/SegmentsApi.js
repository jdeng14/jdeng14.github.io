"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _Segment = _interopRequireDefault(require("../model/Segment"));

var _SegmentCreateParameters = _interopRequireDefault(require("../model/SegmentCreateParameters"));

var _SegmentDeleteResponse = _interopRequireDefault(require("../model/SegmentDeleteResponse"));

var _SegmentUpdateParameters = _interopRequireDefault(require("../model/SegmentUpdateParameters"));

var _SegmentWithComments = _interopRequireDefault(require("../model/SegmentWithComments"));

var _TaggedSegment = _interopRequireDefault(require("../model/TaggedSegment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* Segments service.
* @module api/SegmentsApi
* @version 0.5.0
*/
var SegmentsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new SegmentsApi. 
  * @alias module:api/SegmentsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SegmentsApi(apiClient) {
    _classCallCheck(this, SegmentsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Create a Segment
   * Create a Segment and add it to a Memory. A Segment is a source/target pair that is used to train the machine translation system and populate the translation memory. This is not intended to be used on documents and will throw an error.  The maximum source length is 5,000 characters.  
   * @param {module:model/SegmentCreateParameters} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Segment} and HTTP response
   */


  _createClass(SegmentsApi, [{
    key: "createSegmentWithHttpInfo",
    value: function createSegmentWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling createSegment");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Segment["default"];
      return this.apiClient.callApi('/segments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Create a Segment
     * Create a Segment and add it to a Memory. A Segment is a source/target pair that is used to train the machine translation system and populate the translation memory. This is not intended to be used on documents and will throw an error.  The maximum source length is 5,000 characters.  
     * @param {module:model/SegmentCreateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Segment}
     */

  }, {
    key: "createSegment",
    value: function createSegment(body) {
      return this.createSegmentWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Delete a Segment
     * Delete a Segment from memory. This will not delete a segment from a document. 
     * @param {Number} id A unique Segment identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SegmentDeleteResponse} and HTTP response
     */

  }, {
    key: "deleteSegmentWithHttpInfo",
    value: function deleteSegmentWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling deleteSegment");
      }

      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SegmentDeleteResponse["default"];
      return this.apiClient.callApi('/segments', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete a Segment
     * Delete a Segment from memory. This will not delete a segment from a document. 
     * @param {Number} id A unique Segment identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SegmentDeleteResponse}
     */

  }, {
    key: "deleteSegment",
    value: function deleteSegment(id) {
      return this.deleteSegmentWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Retrieve a Segment
     * Retrieve a Segment.  
     * @param {Number} id A unique Segment identifier.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeComments Include comments in the response. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SegmentWithComments} and HTTP response
     */

  }, {
    key: "getSegmentWithHttpInfo",
    value: function getSegmentWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling getSegment");
      }

      var pathParams = {};
      var queryParams = {
        'id': id,
        'include_comments': opts['includeComments']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SegmentWithComments["default"];
      return this.apiClient.callApi('/segments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Retrieve a Segment
     * Retrieve a Segment.  
     * @param {Number} id A unique Segment identifier.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeComments Include comments in the response. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SegmentWithComments}
     */

  }, {
    key: "getSegment",
    value: function getSegment(id, opts) {
      return this.getSegmentWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Tag a Segment
     * Project tags for a segment. The `source_tagged` string contains one or more SGML tags. The `target` string is untagged. This endpoint will automatically place the source tags in the target.  Usage charges apply to this endpoint for production REST API keys.  
     * @param {String} sourceTagged The tagged source string.
     * @param {String} target The target string.
     * @param {Number} memoryId A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TaggedSegment} and HTTP response
     */

  }, {
    key: "tagSegmentWithHttpInfo",
    value: function tagSegmentWithHttpInfo(sourceTagged, target, memoryId) {
      var postBody = null; // verify the required parameter 'sourceTagged' is set

      if (sourceTagged === undefined || sourceTagged === null) {
        throw new _Error["default"]("Missing the required parameter 'sourceTagged' when calling tagSegment");
      } // verify the required parameter 'target' is set


      if (target === undefined || target === null) {
        throw new _Error["default"]("Missing the required parameter 'target' when calling tagSegment");
      } // verify the required parameter 'memoryId' is set


      if (memoryId === undefined || memoryId === null) {
        throw new _Error["default"]("Missing the required parameter 'memoryId' when calling tagSegment");
      }

      var pathParams = {};
      var queryParams = {
        'source_tagged': sourceTagged,
        'target': target,
        'memory_id': memoryId
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TaggedSegment["default"];
      return this.apiClient.callApi('/segments/tag', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Tag a Segment
     * Project tags for a segment. The `source_tagged` string contains one or more SGML tags. The `target` string is untagged. This endpoint will automatically place the source tags in the target.  Usage charges apply to this endpoint for production REST API keys.  
     * @param {String} sourceTagged The tagged source string.
     * @param {String} target The target string.
     * @param {Number} memoryId A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TaggedSegment}
     */

  }, {
    key: "tagSegment",
    value: function tagSegment(sourceTagged, target, memoryId) {
      return this.tagSegmentWithHttpInfo(sourceTagged, target, memoryId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Update a Segment
     * Update a Segment in memory. The Memory will be updated with the new target string.  
     * @param {module:model/SegmentUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Segment} and HTTP response
     */

  }, {
    key: "updateSegmentWithHttpInfo",
    value: function updateSegmentWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling updateSegment");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Segment["default"];
      return this.apiClient.callApi('/segments', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update a Segment
     * Update a Segment in memory. The Memory will be updated with the new target string.  
     * @param {module:model/SegmentUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Segment}
     */

  }, {
    key: "updateSegment",
    value: function updateSegment(body) {
      return this.updateSegmentWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return SegmentsApi;
}();

exports["default"] = SegmentsApi;