"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _LexiconEntry = _interopRequireDefault(require("../model/LexiconEntry"));

var _LexiconUpdateParameters = _interopRequireDefault(require("../model/LexiconUpdateParameters"));

var _LexiconUpdateResponse = _interopRequireDefault(require("../model/LexiconUpdateResponse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* Lexicon service.
* @module api/LexiconApi
* @version 0.5.0
*/
var LexiconApi = /*#__PURE__*/function () {
  /**
  * Constructs a new LexiconApi. 
  * @alias module:api/LexiconApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function LexiconApi(apiClient) {
    _classCallCheck(this, LexiconApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Query a Lexicon
   * Query the Lexicon. The Lexicon is an editable termbase / concordance that is integrated with the Memory.  
   * @param {Number} memoryId A unique Memory identifier.
   * @param {String} srclang An ISO 639-1 language code.
   * @param {String} trglang An ISO 639-1 language code.
   * @param {String} query The query term.
   * @param {Object} opts Optional parameters
   * @param {Number} opts.n The maximum number of results to return. (default to 1)
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LexiconEntry>} and HTTP response
   */


  _createClass(LexiconApi, [{
    key: "queryLexiconWithHttpInfo",
    value: function queryLexiconWithHttpInfo(memoryId, srclang, trglang, query, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'memoryId' is set

      if (memoryId === undefined || memoryId === null) {
        throw new _Error["default"]("Missing the required parameter 'memoryId' when calling queryLexicon");
      } // verify the required parameter 'srclang' is set


      if (srclang === undefined || srclang === null) {
        throw new _Error["default"]("Missing the required parameter 'srclang' when calling queryLexicon");
      } // verify the required parameter 'trglang' is set


      if (trglang === undefined || trglang === null) {
        throw new _Error["default"]("Missing the required parameter 'trglang' when calling queryLexicon");
      } // verify the required parameter 'query' is set


      if (query === undefined || query === null) {
        throw new _Error["default"]("Missing the required parameter 'query' when calling queryLexicon");
      }

      var pathParams = {};
      var queryParams = {
        'memory_id': memoryId,
        'srclang': srclang,
        'trglang': trglang,
        'query': query,
        'n': opts['n']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_LexiconEntry["default"]];
      return this.apiClient.callApi('/lexicon', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Query a Lexicon
     * Query the Lexicon. The Lexicon is an editable termbase / concordance that is integrated with the Memory.  
     * @param {Number} memoryId A unique Memory identifier.
     * @param {String} srclang An ISO 639-1 language code.
     * @param {String} trglang An ISO 639-1 language code.
     * @param {String} query The query term.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.n The maximum number of results to return. (default to 1)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LexiconEntry>}
     */

  }, {
    key: "queryLexicon",
    value: function queryLexicon(memoryId, srclang, trglang, query, opts) {
      return this.queryLexiconWithHttpInfo(memoryId, srclang, trglang, query, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Update a Lexicon
     * Update the Lexicon (Termbase as displayed in the ui) with a new term. The maximum source length is 250 characters.  
     * @param {module:model/LexiconUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LexiconUpdateResponse} and HTTP response
     */

  }, {
    key: "updateLexiconWithHttpInfo",
    value: function updateLexiconWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling updateLexicon");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _LexiconUpdateResponse["default"];
      return this.apiClient.callApi('/lexicon', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update a Lexicon
     * Update the Lexicon (Termbase as displayed in the ui) with a new term. The maximum source length is 250 characters.  
     * @param {module:model/LexiconUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LexiconUpdateResponse}
     */

  }, {
    key: "updateLexicon",
    value: function updateLexicon(body) {
      return this.updateLexiconWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return LexiconApi;
}();

exports["default"] = LexiconApi;