"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _QARuleMatches = _interopRequireDefault(require("../model/QARuleMatches"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* QA service.
* @module api/QAApi
* @version 0.5.0
*/
var QAApi = /*#__PURE__*/function () {
  /**
  * Constructs a new QAApi. 
  * @alias module:api/QAApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function QAApi(apiClient) {
    _classCallCheck(this, QAApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Perform QA check
   * Perform QA checks on a target string. Optionally, you can specify a source string for additional bilingual checks, e.g. number consistency. 
   * @param {String} target A target string to be checked.
   * @param {String} trglang An ISO 639-1 language code.
   * @param {Object} opts Optional parameters
   * @param {String} opts.source An optional source string.
   * @param {String} opts.srclang An ISO 639-1 language code.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/QARuleMatches} and HTTP response
   */


  _createClass(QAApi, [{
    key: "qaCheckWithHttpInfo",
    value: function qaCheckWithHttpInfo(target, trglang, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'target' is set

      if (target === undefined || target === null) {
        throw new _Error["default"]("Missing the required parameter 'target' when calling qaCheck");
      } // verify the required parameter 'trglang' is set


      if (trglang === undefined || trglang === null) {
        throw new _Error["default"]("Missing the required parameter 'trglang' when calling qaCheck");
      }

      var pathParams = {};
      var queryParams = {
        'target': target,
        'trglang': trglang,
        'source': opts['source'],
        'srclang': opts['srclang']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _QARuleMatches["default"];
      return this.apiClient.callApi('/qa', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Perform QA check
     * Perform QA checks on a target string. Optionally, you can specify a source string for additional bilingual checks, e.g. number consistency. 
     * @param {String} target A target string to be checked.
     * @param {String} trglang An ISO 639-1 language code.
     * @param {Object} opts Optional parameters
     * @param {String} opts.source An optional source string.
     * @param {String} opts.srclang An ISO 639-1 language code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/QARuleMatches}
     */

  }, {
    key: "qaCheck",
    value: function qaCheck(target, trglang, opts) {
      return this.qaCheckWithHttpInfo(target, trglang, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return QAApi;
}();

exports["default"] = QAApi;