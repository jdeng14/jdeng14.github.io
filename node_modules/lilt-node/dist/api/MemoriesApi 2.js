"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _Memory = _interopRequireDefault(require("../model/Memory"));

var _MemoryCreateParameters = _interopRequireDefault(require("../model/MemoryCreateParameters"));

var _MemoryDeleteResponse = _interopRequireDefault(require("../model/MemoryDeleteResponse"));

var _MemoryImportResponse = _interopRequireDefault(require("../model/MemoryImportResponse"));

var _MemoryInsertResponse = _interopRequireDefault(require("../model/MemoryInsertResponse"));

var _MemoryUpdateParameters = _interopRequireDefault(require("../model/MemoryUpdateParameters"));

var _MemoryUpdateResponse = _interopRequireDefault(require("../model/MemoryUpdateResponse"));

var _TranslationMemoryEntry = _interopRequireDefault(require("../model/TranslationMemoryEntry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* Memories service.
* @module api/MemoriesApi
* @version 0.5.0
*/
var MemoriesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new MemoriesApi. 
  * @alias module:api/MemoriesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function MemoriesApi(apiClient) {
    _classCallCheck(this, MemoriesApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Create a Memory
   * Create a new Memory. A Memory is a container that collects source/target sentences for a specific language pair (e.g., English>French). The data in the Memory is used to train the MT system, populate the TM, and update the lexicon. Memories are private to your account - the data is not shared across users - unless you explicitly share a Memory with your team (via web app only).  <a href=\"https://lilt.com/kb/memory/memories\" target=_blank>Refer to our KB</a> for a more detailed description.  
   * @param {module:model/MemoryCreateParameters} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Memory} and HTTP response
   */


  _createClass(MemoriesApi, [{
    key: "createMemoryWithHttpInfo",
    value: function createMemoryWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling createMemory");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Memory["default"];
      return this.apiClient.callApi('/memories', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Create a Memory
     * Create a new Memory. A Memory is a container that collects source/target sentences for a specific language pair (e.g., English>French). The data in the Memory is used to train the MT system, populate the TM, and update the lexicon. Memories are private to your account - the data is not shared across users - unless you explicitly share a Memory with your team (via web app only).  <a href=\"https://lilt.com/kb/memory/memories\" target=_blank>Refer to our KB</a> for a more detailed description.  
     * @param {module:model/MemoryCreateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Memory}
     */

  }, {
    key: "createMemory",
    value: function createMemory(body) {
      return this.createMemoryWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Delete a Memory
     * Delete a Memory. 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemoryDeleteResponse} and HTTP response
     */

  }, {
    key: "deleteMemoryWithHttpInfo",
    value: function deleteMemoryWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling deleteMemory");
      }

      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _MemoryDeleteResponse["default"];
      return this.apiClient.callApi('/memories', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete a Memory
     * Delete a Memory. 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemoryDeleteResponse}
     */

  }, {
    key: "deleteMemory",
    value: function deleteMemory(id) {
      return this.deleteMemoryWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Retrieve a Memory
     * Retrieve a Memory. If you cannot access the Memory (401 error) please check permissions (e.g. in case you created the Memory via the web app with a different account you may have to explicitly share that Memory).  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id An optional Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Memory>} and HTTP response
     */

  }, {
    key: "getMemoryWithHttpInfo",
    value: function getMemoryWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': opts['id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_Memory["default"]];
      return this.apiClient.callApi('/memories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Retrieve a Memory
     * Retrieve a Memory. If you cannot access the Memory (401 error) please check permissions (e.g. in case you created the Memory via the web app with a different account you may have to explicitly share that Memory).  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id An optional Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Memory>}
     */

  }, {
    key: "getMemory",
    value: function getMemory(opts) {
      return this.getMemoryWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * File import for a Memory
     * Imports common translation memory or termbase file formats to a specific Lilt memory. Currently supported file formats are `*.tmx`, `*.sdltm` and `*.tmq` for TM data; `*.csv` and `*.tbx` for termbase data. Request parameters should be passed as JSON object with the header field `LILT-API`.  Example cURL command to upload a translation memory file named `my_memory.sdltm` in the current working directory: ```   curl -X POST https://lilt.com/2/memories/import?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.sdltm\\\",\\\"memory_id\\\": 42}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.sdltm ```  
     * @param {Number} memoryId A unique Memory identifier.
     * @param {String} name Name of the TM or termbase file.
     * @param {String} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemoryImportResponse} and HTTP response
     */

  }, {
    key: "importMemoryFileWithHttpInfo",
    value: function importMemoryFileWithHttpInfo(memoryId, name, body) {
      var postBody = body; // verify the required parameter 'memoryId' is set

      if (memoryId === undefined || memoryId === null) {
        throw new _Error["default"]("Missing the required parameter 'memoryId' when calling importMemoryFile");
      } // verify the required parameter 'name' is set


      if (name === undefined || name === null) {
        throw new _Error["default"]("Missing the required parameter 'name' when calling importMemoryFile");
      } // verify the required parameter 'body' is set


      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling importMemoryFile");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'memory_id': memoryId,
        'name': name
      };
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json'];
      var returnType = _MemoryImportResponse["default"];
      return this.apiClient.callApi('/memories/import', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * File import for a Memory
     * Imports common translation memory or termbase file formats to a specific Lilt memory. Currently supported file formats are `*.tmx`, `*.sdltm` and `*.tmq` for TM data; `*.csv` and `*.tbx` for termbase data. Request parameters should be passed as JSON object with the header field `LILT-API`.  Example cURL command to upload a translation memory file named `my_memory.sdltm` in the current working directory: ```   curl -X POST https://lilt.com/2/memories/import?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.sdltm\\\",\\\"memory_id\\\": 42}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.sdltm ```  
     * @param {Number} memoryId A unique Memory identifier.
     * @param {String} name Name of the TM or termbase file.
     * @param {String} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemoryImportResponse}
     */

  }, {
    key: "importMemoryFile",
    value: function importMemoryFile(memoryId, name, body) {
      return this.importMemoryFileWithHttpInfo(memoryId, name, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Query a Memory
     * Perform a translation memory query.  
     * @param {Number} id A unique Memory identifier.
     * @param {String} query A source query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.n Maximum number of results to return. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TranslationMemoryEntry>} and HTTP response
     */

  }, {
    key: "queryMemoryWithHttpInfo",
    value: function queryMemoryWithHttpInfo(id, query, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling queryMemory");
      } // verify the required parameter 'query' is set


      if (query === undefined || query === null) {
        throw new _Error["default"]("Missing the required parameter 'query' when calling queryMemory");
      }

      var pathParams = {};
      var queryParams = {
        'id': id,
        'query': query,
        'n': opts['n']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_TranslationMemoryEntry["default"]];
      return this.apiClient.callApi('/memories/query', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Query a Memory
     * Perform a translation memory query.  
     * @param {Number} id A unique Memory identifier.
     * @param {String} query A source query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.n Maximum number of results to return. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TranslationMemoryEntry>}
     */

  }, {
    key: "queryMemory",
    value: function queryMemory(id, query, opts) {
      return this.queryMemoryWithHttpInfo(id, query, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Delete-sync for a Memory
     * Deletes segments in the Memory matching the `from_time`, `to_time` and `when` parameters.  Example CURL command: ```   curl -X DELETE https://lilt.com/2/memories/sync?key=API_KEY&id=42&from_time=1491048000&to_time=1491049800&when=created ```  
     * @param {Number} id A unique Memory identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of the start of the Memory section.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of the end of the Memory section.
     * @param {String} opts.when The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemoryInsertResponse} and HTTP response
     */

  }, {
    key: "syncDeleteMemoryWithHttpInfo",
    value: function syncDeleteMemoryWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling syncDeleteMemory");
      }

      var pathParams = {};
      var queryParams = {
        'id': id,
        'from_time': opts['fromTime'],
        'to_time': opts['toTime'],
        'when': opts['when']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _MemoryInsertResponse["default"];
      return this.apiClient.callApi('/memories/sync', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete-sync for a Memory
     * Deletes segments in the Memory matching the `from_time`, `to_time` and `when` parameters.  Example CURL command: ```   curl -X DELETE https://lilt.com/2/memories/sync?key=API_KEY&id=42&from_time=1491048000&to_time=1491049800&when=created ```  
     * @param {Number} id A unique Memory identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of the start of the Memory section.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of the end of the Memory section.
     * @param {String} opts.when The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemoryInsertResponse}
     */

  }, {
    key: "syncDeleteMemory",
    value: function syncDeleteMemory(id, opts) {
      return this.syncDeleteMemoryWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Get-sync for a Memory
     * Get all or part of a memory in TMX 1.4b format. If the `from_time` and/or `to_time` are omitted, then all segments are returned. The parameter `when` specifies on which date field `from_time` and `to_time` are matched. Possible values are `created` (when the segment was originally created in the memory), `updated` (when the segment was lastly updated), and `deleted` (when the segment was deleted).  Example CURL command: ```   curl -X GET https://lilt.com/2/memories/sync?key=API_KEY&id=42 -o from_lilt.tmx ```  
     * @param {Number} id A unique Memory identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of the start of the Memory section.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of the end of the Memory section.
     * @param {String} opts.when The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`. If this parameter is omitted, then the whole Memory is returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Blob} and HTTP response
     */

  }, {
    key: "syncDownMemoryWithHttpInfo",
    value: function syncDownMemoryWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling syncDownMemory");
      }

      var pathParams = {};
      var queryParams = {
        'id': id,
        'from_time': opts['fromTime'],
        'to_time': opts['toTime'],
        'when': opts['when']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/x-tmx'];
      var returnType = 'Blob';
      return this.apiClient.callApi('/memories/sync', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get-sync for a Memory
     * Get all or part of a memory in TMX 1.4b format. If the `from_time` and/or `to_time` are omitted, then all segments are returned. The parameter `when` specifies on which date field `from_time` and `to_time` are matched. Possible values are `created` (when the segment was originally created in the memory), `updated` (when the segment was lastly updated), and `deleted` (when the segment was deleted).  Example CURL command: ```   curl -X GET https://lilt.com/2/memories/sync?key=API_KEY&id=42 -o from_lilt.tmx ```  
     * @param {Number} id A unique Memory identifier.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of the start of the Memory section.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of the end of the Memory section.
     * @param {String} opts.when The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`. If this parameter is omitted, then the whole Memory is returned.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Blob}
     */

  }, {
    key: "syncDownMemory",
    value: function syncDownMemory(id, opts) {
      return this.syncDownMemoryWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Insert-sync for a Memory
     * Inserts a TM in TMX 1.4b format into the Memory. Request parameters should be passed as JSON object with the header field `LILT-API`.  Example CURL command: ```   curl -X POST https://lilt.com/2/memories/sync?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.tmx\\\",\\\"id\\\": 42}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.tmx ```  
     * @param {Number} id A unique Memory identifier.
     * @param {String} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the TMX file.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemoryInsertResponse} and HTTP response
     */

  }, {
    key: "syncInsertMemoryWithHttpInfo",
    value: function syncInsertMemoryWithHttpInfo(id, body, opts) {
      opts = opts || {};
      var postBody = body; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling syncInsertMemory");
      } // verify the required parameter 'body' is set


      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling syncInsertMemory");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'id': id,
        'name': opts['name']
      };
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json'];
      var returnType = _MemoryInsertResponse["default"];
      return this.apiClient.callApi('/memories/sync', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Insert-sync for a Memory
     * Inserts a TM in TMX 1.4b format into the Memory. Request parameters should be passed as JSON object with the header field `LILT-API`.  Example CURL command: ```   curl -X POST https://lilt.com/2/memories/sync?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.tmx\\\",\\\"id\\\": 42}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.tmx ```  
     * @param {Number} id A unique Memory identifier.
     * @param {String} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the TMX file.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemoryInsertResponse}
     */

  }, {
    key: "syncInsertMemory",
    value: function syncInsertMemory(id, body, opts) {
      return this.syncInsertMemoryWithHttpInfo(id, body, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Update-sync for a Memory
     * Updates the Memory with given TMX file. Request parameters should be passed as JSON object with the header field `LILT-API`. The number of segments returned by the `from_time`, `to_time`, `when` parameters and the number of segments in the TMX file need to be identical.  Example CURL command: ```   curl -X PUT https://lilt.com/2/memories/sync?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.tmx\\\", \\\"id\\\": 42, \\\"from_time\\\": 1491048000, \\\"to_time\\\": 1491049800, \"when\": \"Updated\"}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.tmx ```  
     * @param {Number} id A unique Memory identifier.
     * @param {String} body The file contents to be uploaded. The entire PUT body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of the start of the Memory section.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of the end of the Memory section.
     * @param {String} opts.when The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemoryUpdateResponse} and HTTP response
     */

  }, {
    key: "syncUpdateMemoryWithHttpInfo",
    value: function syncUpdateMemoryWithHttpInfo(id, body, opts) {
      opts = opts || {};
      var postBody = body; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling syncUpdateMemory");
      } // verify the required parameter 'body' is set


      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling syncUpdateMemory");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {
        'id': id,
        'from_time': opts['fromTime'],
        'to_time': opts['toTime'],
        'when': opts['when']
      };
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _MemoryUpdateResponse["default"];
      return this.apiClient.callApi('/memories/sync', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update-sync for a Memory
     * Updates the Memory with given TMX file. Request parameters should be passed as JSON object with the header field `LILT-API`. The number of segments returned by the `from_time`, `to_time`, `when` parameters and the number of segments in the TMX file need to be identical.  Example CURL command: ```   curl -X PUT https://lilt.com/2/memories/sync?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.tmx\\\", \\\"id\\\": 42, \\\"from_time\\\": 1491048000, \\\"to_time\\\": 1491049800, \"when\": \"Updated\"}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.tmx ```  
     * @param {Number} id A unique Memory identifier.
     * @param {String} body The file contents to be uploaded. The entire PUT body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of the start of the Memory section.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of the end of the Memory section.
     * @param {String} opts.when The date field on which retrieved segments match from/to time stamps: `created`, `updated`, `deleted`.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemoryUpdateResponse}
     */

  }, {
    key: "syncUpdateMemory",
    value: function syncUpdateMemory(id, body, opts) {
      return this.syncUpdateMemoryWithHttpInfo(id, body, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Update the name of a Memory
     * Update a Memory. 
     * @param {module:model/MemoryUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Memory} and HTTP response
     */

  }, {
    key: "updateMemoryWithHttpInfo",
    value: function updateMemoryWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling updateMemory");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Memory["default"];
      return this.apiClient.callApi('/memories', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update the name of a Memory
     * Update a Memory. 
     * @param {module:model/MemoryUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Memory}
     */

  }, {
    key: "updateMemory",
    value: function updateMemory(body) {
      return this.updateMemoryWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return MemoriesApi;
}();

exports["default"] = MemoriesApi;