"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _Error = _interopRequireDefault(require("../model/Error"));

var _Project = _interopRequireDefault(require("../model/Project"));

var _ProjectCreateParameters = _interopRequireDefault(require("../model/ProjectCreateParameters"));

var _ProjectDeleteResponse = _interopRequireDefault(require("../model/ProjectDeleteResponse"));

var _ProjectQuote = _interopRequireDefault(require("../model/ProjectQuote"));

var _ProjectStatus = _interopRequireDefault(require("../model/ProjectStatus"));

var _ProjectUpdateResponse = _interopRequireDefault(require("../model/ProjectUpdateResponse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
* Projects service.
* @module api/ProjectsApi
* @version 0.5.0
*/
var ProjectsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ProjectsApi. 
  * @alias module:api/ProjectsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function ProjectsApi(apiClient) {
    _classCallCheck(this, ProjectsApi);

    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Create a Project
   * Create a Project. A Project is a collection of Documents.  A Project is associated with exactly one Memory.  Projects appear in the dashboard of the web app.  
   * @param {module:model/ProjectCreateParameters} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
   */


  _createClass(ProjectsApi, [{
    key: "createProjectWithHttpInfo",
    value: function createProjectWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling createProject");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Project["default"];
      return this.apiClient.callApi('/projects', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Create a Project
     * Create a Project. A Project is a collection of Documents.  A Project is associated with exactly one Memory.  Projects appear in the dashboard of the web app.  
     * @param {module:model/ProjectCreateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */

  }, {
    key: "createProject",
    value: function createProject(body) {
      return this.createProjectWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Delete a Project
     * Delete a Project. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id A unique Project identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectDeleteResponse} and HTTP response
     */

  }, {
    key: "deleteProjectWithHttpInfo",
    value: function deleteProjectWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': opts['id']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ProjectDeleteResponse["default"];
      return this.apiClient.callApi('/projects', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete a Project
     * Delete a Project. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id A unique Project identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectDeleteResponse}
     */

  }, {
    key: "deleteProject",
    value: function deleteProject(opts) {
      return this.deleteProjectWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Retrieve Project report
     * Get information about a project that can be used for quoting. This includes: * A translation memory leverage report * Word count * Segment count  
     * @param {Number} id A unique Project identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectQuote} and HTTP response
     */

  }, {
    key: "getProjectReportWithHttpInfo",
    value: function getProjectReportWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling getProjectReport");
      }

      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ProjectQuote["default"];
      return this.apiClient.callApi('/projects/quote', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Retrieve Project report
     * Get information about a project that can be used for quoting. This includes: * A translation memory leverage report * Word count * Segment count  
     * @param {Number} id A unique Project identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectQuote}
     */

  }, {
    key: "getProjectReport",
    value: function getProjectReport(id) {
      return this.getProjectReportWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Retrieve Project status
     * Retrieve the status of a Project.  
     * @param {Number} id A unique Project identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ProjectStatus} and HTTP response
     */

  }, {
    key: "getProjectStatusWithHttpInfo",
    value: function getProjectStatusWithHttpInfo(id) {
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new _Error["default"]("Missing the required parameter 'id' when calling getProjectStatus");
      }

      var pathParams = {};
      var queryParams = {
        'id': id
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ProjectStatus["default"];
      return this.apiClient.callApi('/projects/status', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Retrieve Project status
     * Retrieve the status of a Project.  
     * @param {Number} id A unique Project identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ProjectStatus}
     */

  }, {
    key: "getProjectStatus",
    value: function getProjectStatus(id) {
      return this.getProjectStatusWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Retrieve a Project
     * Retrieves one or more projects, including the documents associated with each project. Retrieving a project is the most efficient way to retrieve a single project or a list of all available projects.  To retrieve a specific project, specify the `id` request parameter. To retrieve all projects, omit the `id` request parameter. To limit the retrieved projects to those with a particular source language or target language, specify the corresponding ISO 639-1 language codes in the `srclang` and `trglang` request parameters, respectively.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id A unique Project identifier.
     * @param {String} opts.srclang An ISO 639-1 language code.
     * @param {String} opts.trglang An ISO 639-1 language code.
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of Projects with `created_at` greater than or equal to the value.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of Projects with `created_at` less than the value.
     * @param {String} opts.state A project state (backlog, inProgress, inReview, inQA, done).
     * @param {Boolean} opts.archived A flag that toggles whether to include archived projects in the response (the default is `true`).
     * @param {Number} opts.connectorId A unique Connector identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Project>} and HTTP response
     */

  }, {
    key: "getProjectsWithHttpInfo",
    value: function getProjectsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'id': opts['id'],
        'srclang': opts['srclang'],
        'trglang': opts['trglang'],
        'from_time': opts['fromTime'],
        'to_time': opts['toTime'],
        'state': opts['state'],
        'archived': opts['archived'],
        'connector_id': opts['connectorId']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [_Project["default"]];
      return this.apiClient.callApi('/projects', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Retrieve a Project
     * Retrieves one or more projects, including the documents associated with each project. Retrieving a project is the most efficient way to retrieve a single project or a list of all available projects.  To retrieve a specific project, specify the `id` request parameter. To retrieve all projects, omit the `id` request parameter. To limit the retrieved projects to those with a particular source language or target language, specify the corresponding ISO 639-1 language codes in the `srclang` and `trglang` request parameters, respectively.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id A unique Project identifier.
     * @param {String} opts.srclang An ISO 639-1 language code.
     * @param {String} opts.trglang An ISO 639-1 language code.
     * @param {Number} opts.fromTime Unix time stamp (epoch, in seconds) of Projects with `created_at` greater than or equal to the value.
     * @param {Number} opts.toTime Unix time stamp (epoch, in seconds) of Projects with `created_at` less than the value.
     * @param {String} opts.state A project state (backlog, inProgress, inReview, inQA, done).
     * @param {Boolean} opts.archived A flag that toggles whether to include archived projects in the response (the default is `true`).
     * @param {Number} opts.connectorId A unique Connector identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Project>}
     */

  }, {
    key: "getProjects",
    value: function getProjects(opts) {
      return this.getProjectsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
    /**
     * Update a Project
     * Update a Project. 
     * @param {module:model/ProjectUpdateResponse} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Project} and HTTP response
     */

  }, {
    key: "updateProjectWithHttpInfo",
    value: function updateProjectWithHttpInfo(body) {
      var postBody = body; // verify the required parameter 'body' is set

      if (body === undefined || body === null) {
        throw new _Error["default"]("Missing the required parameter 'body' when calling updateProject");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['ApiKeyAuth', 'BasicAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _Project["default"];
      return this.apiClient.callApi('/projects', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update a Project
     * Update a Project. 
     * @param {module:model/ProjectUpdateResponse} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Project}
     */

  }, {
    key: "updateProject",
    value: function updateProject(body) {
      return this.updateProjectWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return ProjectsApi;
}();

exports["default"] = ProjectsApi;